/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-05-16 04:03:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.logonPage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class entryPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("\t<head>\n");
      out.write("\t\t<meta charset=\"UTF-8\">\n");
      out.write("\t\t<title>BuzzCloud</title>\t\n");
      out.write("\t\t\n");
      out.write("    <script type=\"text/javascript\" charset=\"utf-8\" src=\"http://code.jquery.com/jquery-2.2.3.min.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" charset=\"utf-8\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.0/jquery.cookie.min.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" charset=\"utf-8\" src=\"https://static.nid.naver.com/js/naverLogin_implicit-1.0.2.js\"></script>\n");
      out.write("\n");
      out.write("\t\t</head>\t\n");
      out.write("\t\t\n");
      out.write("\t<body>\n");
      out.write("\t\n");
      out.write("\t</div>\n");
      out.write("\t<div id=\"naver_id_login\">\n");
      out.write("\t\t\n");
      out.write(" \t <!-- <input type=\"BUTTON\" value=\"네이버로 로그인\" name=\"LoginToNaver\" class=\"NAVER_BUTTON\"  onclick='loginProcess()'></input> -->\n");
      out.write("\t\t\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div><input type=\"BUTTON\" value=\"정보보기\" onclick='load()'></input>\n");
      out.write("\t\t\n");
      out.write("\t\t<div><h3 id=\"result\"></h3></div>\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("\t\tvar mail;\n");
      out.write("\t\tvar nick;\n");
      out.write("\n");
      out.write("\t\tvar naver = new naver_id_login(\"Vf8cYbYQv2N0c_cSv_XA\", \"http://114.129.211.33:8181/\");\n");
      out.write("\t\tvar state = naver.getUniqState();\n");
      out.write("\t\tnaver.setState(state);\n");
      out.write("\t\tnaver.setButton(BUTTON_COLOR_GREEN, BANNER_BIG_TYPE, 40);\n");
      out.write("\t\tnaver.setStateStore();\n");
      out.write("\t\tnaver.init_naver_id_login();\t \n");
      out.write("\n");
      out.write("\t\tgetParameter = function(param){\n");
      out.write("\t\t    full_url=location.href;\n");
      out.write("\t\t    \n");
      out.write("\t\t  \t\t\t//파라미터가 하나도 없을때\n");
      out.write("\t\t    if(full_url.search(\"&\") == -1)\n");
      out.write("\t\t        return false;\n");
      out.write("\n");
      out.write("\t\t  \t\t\tif(full_url.indexOf(\"#\") != -1)\n");
      out.write("\t\t    \t\t\t\tsearch=full_url.split(\"#\");\n");
      out.write("\t\t  \t\t\telse if(full_url.indexOf(\"?\") != -1)\n");
      out.write("\t\t  \t\t\t\t\tsearch=full_url.split(\"?\");\n");
      out.write("\t\t  \t\t\telse\n");
      out.write("\t\t  \t\t\t\t\treturn null;\n");
      out.write("\t\t  \t\t\t\n");
      out.write("\t\t\t\t    //해당하는 파라미터가 없을때.\n");
      out.write("\t\t    if(search[1].indexOf(param)==(-1)){\n");
      out.write("\t\t        \n");
      out.write("\t\t        return \"\";\n");
      out.write("\t\t        return;\n");
      out.write("\t\t\t\t    }\n");
      out.write("\t\t    \n");
      out.write("\t\t    search=search[1].split(\"&\");\n");
      out.write("\n");
      out.write("\t\t   \t\t //한개의 파라미터일때.\n");
      out.write("\t\t    if(search.length<3){\n");
      out.write("\t\t       \n");
      out.write("\t\t        data=search[1].split(\"=\");\n");
      out.write("\t\t        return data[1];\n");
      out.write("\t\t\t\t    }\n");
      out.write("\t\t    else{\n");
      out.write("\t\t\t\t    //여러개의 파라미터 일때.\n");
      out.write("\t\t\t    var i=0;\n");
      out.write("\t\t    \t\tfor(i=0 ; i < search.length ; i++){\n");
      out.write("\t\t    \t\t\t\tdata = search[i].split(\"=\");\n");
      out.write("\t\t\t    \t\t\tif(data[0].match(param))\n");
      out.write("\t\t\t    \t\t\t\treturn data[1];\n");
      out.write("\t\t    \t\t\t}\n");
      out.write("\t\t\t    \tif(i==search.length)\n");
      out.write("\t\t    \t\t\t\treturn NULL;\n");
      out.write("\t\t    \t\t}\n");
      out.write("\t\t    \n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\tfunction setHiddenForm(){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tmail = naver.getProfileData('email');\n");
      out.write("\t\t\tnick = naver.getProfileData('nickname');\n");
      out.write("\t\t\tdocument.getElementsByName(\"email\")[0].value = mail;\n");
      out.write("\t\t\tdocument.getElementsByName(\"nickname\")[0].value = nick;\n");
      out.write("\t\t\tdocument.getElementsByName(\"password\")[0].value = \"\";\n");
      out.write("\t\t\tdocument.getElementsByName(\"reg_date\")[0].value = \"\";\n");
      out.write("\t\t\tdocument.getElementsByName(\"idType\")[0].value = \"naver\";\n");
      out.write("\t\t\tconsole.log(\"네이버 프로필 보내기 : \" + mail + \" , \" + nick);\n");
      out.write("\t\t\tdocument.forms[\"hiddenForm\"].submit();\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\twindow.onload=function(){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t");

			/*  logonBean으로 부터 넘어온 값을 읽어 로그인 성공이 된 경우 로그인유지를 위해 세션에 별도의 값을 저장한다. */
			
				try{
				   
					if( session.getAttribute("id") != null)
						response.sendRedirect("/main.do");
					
					if( (request.getAttribute("oauthJoin")!= null || request.getAttribute("innerJoin") != null) )	{
						
      out.write("\n");
      out.write("\t\t\t\t\t\t\talert( ");
      out.print( (String)request.getAttribute("message") );
      out.write(" );\n");
      out.write("\t\t\t\t\t\t");

						
						session.setAttribute("id", "naverLogin");
						response.sendRedirect("/main.do");

				}else{
					
      out.write("\n");
      out.write("\t\t\t//네이버로그인 콜백인지 확인 \n");
      out.write("\t\t\t\t\t\tvar state = getParameter(\"state\");\n");
      out.write("\t\t\t\t\t\tif(state == null)\n");
      out.write("\t\t\t\t\t\t\tconsole.log(\"error of urlpaser\");\n");
      out.write("\t\t\t\t\t\tvar savedNaverState = naver.state;\t\t\t\n");
      out.write("\t\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\tif( state.match(savedNaverState) ){\n");
      out.write("\t\t\t\t\t\t\t\tnaver.get_naver_userprofile(\"setHiddenForm()\");\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t");

				}//else
			}//try
			catch(Exception e){
				e.printStackTrace();}
					
			
      out.write("\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\t\t<input type=\"BUTTON\" name=\"innerJoin\" value=\"가입하기 \" onClick=\"innerJoin()\"><br>\n");
      out.write("\t\t\t\t<input type=\"BUTTON\" name=\"innerLogon\" value=\"로그인하기 \" onClick=\"innerLogon()\">로그인하기 \n");
      out.write("\n");
      out.write("\t\t<div>\n");
      out.write("\t\t\t<form method=\"GET\" ACTION=\"/logon.do\" id=\"hiddenForm\">\n");
      out.write("\t\t\t\t<input type = \"hidden\" name = \"email\" value = \"\" >\n");
      out.write("\t\t\t\t<input type = \"hidden\" name = \"nickname\" value = \"\" >\n");
      out.write("\t\t\t\t<input type = \"hidden\" name = \"password\" value = \"\" >\n");
      out.write("\t\t\t\t<input type = \"hidden\" name = \"idType\" value = \"\" >\n");
      out.write("\t\t\t\t<input type = \"hidden\" name = \"reg_date\" value = \"\" >\n");
      out.write("\t\t\t</form>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t\n");
      out.write("\t\t<script>\n");
      out.write("\t\t\n");
      out.write("\t\t\tfunction innerJoin(){\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t\t\tlocation.href = \"/innerJoin.do\";\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t</script>\n");
      out.write("\t\t\n");
      out.write("\t</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
