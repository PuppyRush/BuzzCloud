/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-05-06 17:17:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.loginPage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class entryPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("\t<head>\n");
      out.write("\t\t<meta charset=\"UTF-8\">\n");
      out.write("\t\t<title>BuzzCloud</title>\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("    <script type=\"text/javascript\" charset=\"utf-8\" src=\"http://code.jquery.com/jquery-2.2.3.min.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" charset=\"utf-8\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.0/jquery.cookie.min.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" charset=\"utf-8\" src=\"https://static.nid.naver.com/js/naverLogin.js \"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    function generateState() {\n");
      out.write("       // CSRF 방지를 위한 state token 생성 코드\n");
      out.write("       // state token은 추후 검증을 위해 세션에 저장 되어야 합니다.\n");
      out.write("       var oDate = new Date();\n");
      out.write("\t\t        return oDate.getTime();\n");
      out.write("\t\t    }\n");
      out.write("    function saveState(state) {\n");
      out.write("\t\t        $.removeCookie(\"state_token\");\n");
      out.write("\t\t        $.cookie(\"state_token\", state);\n");
      out.write("\t\t    }\n");
      out.write("    \n");
      out.write("    var naver = NaverAuthorize({\n");
      out.write("\t\t        client_id : \"Vf8cYbYQv2N0c_cSv_XA\",\n");
      out.write("\t\t        redirect_uri : \"http://114.129.211.33:8181/loginPage/log\",\n");
      out.write("\t\t        client_secret : \"oPONcfR2BF\"\n");
      out.write("\t\t    });\n");
      out.write("\t\t\t\n");
      out.write("\n");
      out.write("     function loginNaver() {\n");
      out.write("\t\t\t\t\tnaver_id_login.setPopup(); //Popup형태의 인증 진행\n");
      out.write("\t\t\t\t\tnaver_id_login.init_naver_id_login();\n");
      out.write("        var state = generateState();\n");
      out.write("        saveState(state);\n");
      out.write("     \n");
      out.write("        naver.login(state);\n");
      out.write("\t\t\t    }\n");
      out.write("\t\t\t\n");
      out.write("\t\t    $(\"#NaverIdLoginBTN\").click( function () {\n");
      out.write("\t\t        var state = generateState();\n");
      out.write("\t\t        saveState(state);\n");
      out.write("\t\t        naver.login(state);\n");
      out.write("\t\t\t    });\n");
      out.write("\t\t    \n");
      out.write("\t\t    // callback이 오면 checkLoginState()함수를 호출한다.\n");
      out.write("    \t\n");
      out.write("\t\t\t</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t<style>\n");
      out.write("\t\t\n");
      out.write("\t\t\t\tinput.NAVER_BUTTON{\n");
      out.write("\t\t\t border-top: 1px solid #96d1f8;\n");
      out.write("\t\t   background: #40ff00;\n");
      out.write("\t\t   background: -webkit-gradient(linear, left top, left bottom, from(#00ff2f), to(#40ff00));\n");
      out.write("\t\t   background: -webkit-linear-gradient(top, #00ff2f, #40ff00);\n");
      out.write("\t\t   background: -moz-linear-gradient(top, #00ff2f, #40ff00);\n");
      out.write("\t\t   background: -ms-linear-gradient(top, #00ff2f, #40ff00);\n");
      out.write("\t\t   background: -o-linear-gradient(top, #00ff2f, #40ff00);\n");
      out.write("\t\t   padding: 7.5px 15px;\n");
      out.write("\t\t   -webkit-border-radius: 4px;\n");
      out.write("\t\t   -moz-border-radius: 4px;\n");
      out.write("\t\t   border-radius: 4px;\n");
      out.write("\t\t   -webkit-box-shadow: rgba(0,0,0,1) 0 1px 0;\n");
      out.write("\t\t   -moz-box-shadow: rgba(0,0,0,1) 0 1px 0;\n");
      out.write("\t\t   box-shadow: rgba(0,0,0,1) 0 1px 0;\n");
      out.write("\t\t   text-shadow: rgba(0,0,0,.4) 0 1px 0;\n");
      out.write("\t\t   color: white;\n");
      out.write("\t\t   font-size: 15px;\n");
      out.write("\t\t   font-family: Georgia, serif;\n");
      out.write("\t\t   text-decoration: none;\n");
      out.write("\t\t   vertical-align: middle;\n");
      out.write("\t\t   }\n");
      out.write("input.button:hover {\n");
      out.write("   border-top-color: #68c41d;\n");
      out.write("   background: #68c41d;\n");
      out.write("   color: #ccc;\n");
      out.write("   }\n");
      out.write("input.button:active {\n");
      out.write("   border-top-color: #3ac43f;\n");
      out.write("   background: #3ac43f;\n");
      out.write("   }\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t\t</style>\n");
      out.write("\t\t\n");
      out.write("\t\t</head>\n");
      out.write("\t<body>\n");
      out.write("\t\t<form>\n");
      out.write("\t\t <input type=\"BUTTON\" value=\"네이버로 로그인\" name=\"LoginToNaver\" class=\"NAVER_BUTTON\"  onclick='loginNaver()'></input>\n");
      out.write("\t\t</form>\n");
      out.write("\t</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
